{"version":3,"sources":["components/Header.js","components/Contact.js","components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Contact","id","avatar","first_name","last_name","email","useState","isActive","setIsActive","initials","charAt","ListGroupItem","className","onClick","console","log","Image","src","alt","Search","props","InputGroup","icon","faSearch","FormControl","placeholder","type","onChange","e","onSearch","target","value","App","contacts","setContacts","searchValue","setSearchValue","fetchContactsList","a","fetch","response","json","sort","b","localeCompare","useEffect","Container","filter","toLocaleLowerCase","startsWith","map","contact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAQeA,EANA,WACX,OACI,2C,gBC2BOC,EA1BC,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,GAAIC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,MAAW,EAC7BC,oBAAS,GADoB,mBACtDC,EADsD,KAC5CC,EAD4C,KAGvDC,EAAWN,EAAWO,OAAO,GAAG,GAAGN,EAAUM,OAAO,GAQ1D,OACI,eAACC,EAAA,EAAD,CACAC,UAAWL,EAAW,cAAgB,OACtCM,QARiB,WACjBL,GAAaD,GACbO,QAAQC,IAAId,IAIZ,UAGI,8BACCC,EAAS,cAACc,EAAA,EAAD,CAAOC,IAAKf,EAAQgB,IAAKT,EAAUG,UAAU,WAAc,+BAAOH,MAE5E,gCACI,oBAAGG,UAAU,OAAb,UAAqBT,EAArB,IAAkCC,KAClC,mBAAGQ,UAAU,QAAb,SAAsBP,W,gCCFvBc,EAfA,SAACC,GACZ,OACI,eAACC,EAAA,EAAD,CAAYT,UAAU,YAAtB,UACA,cAAC,IAAD,CAAiBU,KAAMC,IAAWX,UAAU,SACxC,cAACY,EAAA,EAAD,CACAC,YAAY,GACZC,KAAK,OACLd,UAAU,SACVe,SAAU,SAACC,GAAD,OAAOR,EAAMS,SAASD,EAAEE,OAAOC,QACzCA,MAAOX,EAAMW,Y,QCiCVC,MAvCf,WAAgB,IAAD,EACmB1B,mBAAS,IAD5B,mBACN2B,EADM,KACIC,EADJ,OAEyB5B,mBAAS,IAFlC,mBAEN6B,EAFM,KAEOC,EAFP,KAKPC,EAAiB,uCAAG,8BAAAC,EAAA,+EAEDC,MATf,kFAOgB,cAElBC,EAFkB,gBAGDA,EAASC,OAHR,QAGlBR,EAHkB,QAIbS,MAAM,SAACJ,EAAEK,GAAH,OAASL,EAAElC,UAAUwC,cAAcD,EAAEvC,cACpD8B,EAAYD,GALU,kDAOtBnB,QAAQC,IAAR,MAPsB,0DAAH,qDAqBvB,OAJA8B,qBAAU,WACRR,MACC,IAGD,+BACE,eAACS,EAAA,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQjB,SAAUO,EAAgBL,MAAOI,IACtCF,EAASc,QAdK,SAAC,GAA+B,IAA7B5C,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UACpC,OAAOD,EAAW6C,oBAAoBC,WAAWd,EAAYa,sBAC1D5C,EAAU4C,oBAAoBC,WAAWd,EAAYa,wBAYjBE,KAAI,SAACC,EAASlD,GAAV,OACnC,cAAC,EAAD,eAAsBkD,GAARlD,YC/BXmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0bd1c7e7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <h1>Contacts</h1>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\r\n\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nconst Contact = ({ id, avatar, first_name, last_name, email}) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    const initials = first_name.charAt(0)+\"\"+last_name.charAt(0);\r\n\r\n    //Toggle active list element and showing it's id to console\r\n    const toggleActive = () => {\r\n        setIsActive(!isActive);\r\n        console.log(id);\r\n    }\r\n\r\n    return (\r\n        <ListGroupItem \r\n        className={isActive ? \"item-active\" : \"item\"}\r\n        onClick={toggleActive}>\r\n            <div>\r\n            {avatar ? <Image src={avatar} alt={initials} className=\"avatar\" /> : <span>{initials}</span>}\r\n            </div>\r\n            <div>\r\n                <p className=\"name\">{first_name} {last_name}</p>\r\n                <p className=\"email\">{email}</p>\r\n            </div>\r\n        </ListGroupItem>\r\n    );\r\n};\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\n\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Search = (props) => {\r\n    return (\r\n        <InputGroup className=\"container\">\r\n        <FontAwesomeIcon icon={faSearch}  className=\"icon\"/>\r\n            <FormControl\r\n            placeholder=\"\" \r\n            type=\"text\"\r\n            className=\"search\"\r\n            onChange={(e) => props.onSearch(e.target.value)}\r\n            value={props.value}\r\n            />\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default Search;","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\n\nimport Header from './components/Header';\nimport Contact from './components/Contact';\nimport Search from './components/Search';\n\nimport Container from 'react-bootstrap/Container';\n\nconst URL = 'https://teacode-recruitment-challenge.s3.eu-central-1.amazonaws.com/users.json';\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [searchValue, setSearchValue] = useState('');\n\n  //fetching list of contacts from url\n  const fetchContactsList = async() => {\n    try {\n      let response = await fetch(URL)\n      let contacts = await response.json()\n      contacts.sort( (a,b) => a.last_name.localeCompare(b.last_name))\n      setContacts(contacts)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  //returning filtered contacts list by first letters of first name or last name\n  const filterContacts = ({ first_name, last_name }) => {\n    return first_name.toLocaleLowerCase().startsWith(searchValue.toLocaleLowerCase())\n    || last_name.toLocaleLowerCase().startsWith(searchValue.toLocaleLowerCase())\n  }\n\n  useEffect(() => {\n    fetchContactsList()\n  }, []);\n\n  return (\n    <main>\n      <Container>\n        <Header />\n        <Search onSearch={setSearchValue} value={searchValue} />\n          {contacts.filter(filterContacts).map((contact, id) => (\n            <Contact key={id} {...contact}/>\n          ))}\n      </Container>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}